/* Copyright 2010, Sterling Commerce, Inc. All rights reserved. */
/*
 LIMITATION OF LIABILITY
 THIS SOFTWARE SAMPLE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED 
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 IN NO EVENT SHALL STERLING COMMERCE, Inc. BE LIABLE UNDER ANY THEORY OF 
 LIABILITY (INCLUDING, BUT NOT LIMITED TO, BREACH OF CONTRACT, BREACH 
 OF WARRANTY, TORT, NEGLIGENCE, STRICT LIABILITY, OR ANY OTHER THEORY 
 OF LIABILITY) FOR (i) DIRECT DAMAGES OR INDIRECT, SPECIAL, INCIDENTAL, 
 OR CONSEQUENTIAL DAMAGES SUCH AS, BUT NOT LIMITED TO, EXEMPLARY OR 
 PUNITIVE DAMAGES, OR ANY OTHER SIMILAR DAMAGES, WHETHER OR NOT 
 FORESEEABLE AND WHETHER OR NOT STERLING OR ITS REPRESENTATIVES HAVE 
 BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES, OR (ii) ANY OTHER 
 CLAIM, DEMAND OR DAMAGES WHATSOEVER RESULTING FROM OR ARISING OUT OF
 OR IN CONNECTION THE DELIVERY OR USE OF THIS INFORMATION.
 */

package com.nwcg.icbs.yantra.api.otherorder;

import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.yantra.yfc.log.YFCLogCategory;
import com.nwcg.icbs.yantra.api.adjlocninv.NWCGRemoveTrackableItems;
import com.nwcg.icbs.yantra.exception.common.NWCGException;
import com.nwcg.icbs.yantra.util.common.CommonUtilities;
import com.nwcg.icbs.yantra.util.common.NWCGApplicationLogger;
import com.nwcg.icbs.yantra.util.common.StringUtil;
import com.nwcg.icbs.yantra.util.common.XMLUtil;
import com.yantra.yfs.japi.YFSEnvironment;

/**
 * @author jwarrick 
 * This class creates the Other Order Number, which is based on
 *         the total number of records already in the DB. The new value of
 *         customer id will be the CacheID followed by a number generated by
 *         this class, which is equal to the total number of records in the DB
 *         plus 1.
 * 
 */
public class NWCGGetOtherOrderNumber {

	private static YFCLogCategory logger = NWCGApplicationLogger
			.instance(NWCGGetOtherOrderNumber.class);

	public Document getOtherOrderNumber(YFSEnvironment arg0, Document arg1)
			throws NWCGException {
		if (logger.isVerboseEnabled())
			logger.verbose("Input XML " + XMLUtil.getXMLString(arg1));

		Element root = arg1.getDocumentElement();
		String strCacheID = root.getAttribute("PrimaryCacheId");

		if (strCacheID == null || strCacheID.equals("")) {
			logger.error("NWCGRefurbReturns::processRefurbSerializedQuantity, YFSEnvironment is null");
			throw new NWCGException("NWCG_OTHER_ORDER_CREATE_001");
		}

		try {
			Document doc = XMLUtil.createDocument("NWCGIncidentOrder");
			Element elem = doc.getDocumentElement();
			elem.setAttribute("PrimaryCacheID", strCacheID);

			Document docReturn = CommonUtilities.invokeService(arg0,
					"NWCGGetIncidentOrderListService", doc);
			Element eleOrderList = docReturn.getDocumentElement();
			NodeList nlOtherOrder = eleOrderList
					.getElementsByTagName("NWCGIncidentOrder");

			try {
				
				int intTotalNumberOfRecords = nlOtherOrder.getLength();
				if (nlOtherOrder == null){
					intTotalNumberOfRecords = 0;
				}
									
				String strOtherOrderNum;

				// increase the counter
				intTotalNumberOfRecords++;
				// append leading zero's
				strOtherOrderNum = strCacheID
						+ StringUtil.prepadStringWithZeros(""
								+ intTotalNumberOfRecords, 6);
				root.setAttribute("IncidentNo", strOtherOrderNum);
				if (logger.isVerboseEnabled())
					logger.verbose("returning " + arg1);
				// return this customer id
				return (arg1);
			}

			catch (NumberFormatException e) {
				logger.error("!!!!! NumberFormatException ",e);
				throw new NWCGException("NumberFormatException "
						+ e.getMessage());
			}

		}

		catch (ParserConfigurationException e) {
			logger.error("!!!!! ParserConfigurationException ",e);
			throw new NWCGException("ParserConfigurationException "
					+ e.getMessage());
		} catch (Exception e) {
			logger.error("!!!!! Exception " , e);
			throw new NWCGException("Exception " + e.getMessage());
		}

	}
}