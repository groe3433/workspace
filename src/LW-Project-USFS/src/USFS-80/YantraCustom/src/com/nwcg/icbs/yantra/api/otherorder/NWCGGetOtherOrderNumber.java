/**
 * 
 */
package com.nwcg.icbs.yantra.api.otherorder;

import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.nwcg.icbs.yantra.exception.common.NWCGException;
import com.nwcg.icbs.yantra.util.common.CommonUtilities;
import com.nwcg.icbs.yantra.util.common.Logger;
import com.nwcg.icbs.yantra.util.common.StringUtil;
import com.nwcg.icbs.yantra.util.common.XMLUtil;
import com.yantra.yfs.japi.YFSEnvironment;

/**
 * @author jwarrick 
 * This class creates the Other Order Number, which is based on
 *         the total number of records already in the DB. The new value of
 *         customer id will be the CacheID followed by a number generated by
 *         this class, which is equal to the total number of records in the DB
 *         plus 1.
 * 
 */
public class NWCGGetOtherOrderNumber {

	private static Logger log = Logger.getLogger(NWCGGetOtherOrderNumber.class
			.getName());

	public Document getOtherOrderNumber(YFSEnvironment arg0, Document arg1)
			throws NWCGException {
		if (log.isVerboseEnabled())
			log.verbose("Input XML " + XMLUtil.getXMLString(arg1));

		Element root = arg1.getDocumentElement();
		String strCacheID = root.getAttribute("PrimaryCacheId");

		if (strCacheID == null || strCacheID.equals("")) {
			log
					.error("NWCGRefurbReturns::processRefurbSerializedQuantity, YFSEnvironment is null");
			throw new NWCGException("NWCG_OTHER_ORDER_CREATE_001");
		}

		try {
			Document doc = XMLUtil.createDocument("NWCGIncidentOrder");
			Element elem = doc.getDocumentElement();
			elem.setAttribute("PrimaryCacheID", strCacheID);

			Document docReturn = CommonUtilities.invokeService(arg0,
					"NWCGGetIncidentOrderListService", doc);
			Element eleOrderList = docReturn.getDocumentElement();
			NodeList nlOtherOrder = eleOrderList
					.getElementsByTagName("NWCGIncidentOrder");

			try {
				
				int intTotalNumberOfRecords = nlOtherOrder.getLength();
				if (nlOtherOrder == null){
					intTotalNumberOfRecords = 0;
				}
									
				String strOtherOrderNum;

				// increase the counter
				intTotalNumberOfRecords++;
				// append leading zero's
				strOtherOrderNum = strCacheID
						+ StringUtil.prepadStringWithZeros(""
								+ intTotalNumberOfRecords, 6);
				root.setAttribute("IncidentNo", strOtherOrderNum);
				if (log.isVerboseEnabled())
					log.verbose("returning " + arg1);
				// return this customer id
				return (arg1);
			}

			catch (NumberFormatException e) {
				if (log.isVerboseEnabled())
					log.verbose("NumberFormatException " + e);
				e.printStackTrace();
				throw new NWCGException("NumberFormatException "
						+ e.getMessage());
			}

		}

		catch (ParserConfigurationException e) {
			e.printStackTrace();
			if (log.isVerboseEnabled())
				log.verbose("ParserConfigurationException " + e);
			throw new NWCGException("ParserConfigurationException "
					+ e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			if (log.isVerboseEnabled())
				log.verbose("Exception " + e);
			throw new NWCGException("Exception " + e.getMessage());
		}

	}
}