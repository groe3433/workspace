/* Copyright 2010, Sterling Commerce, Inc. All rights reserved. */
/*
 LIMITATION OF LIABILITY
 THIS SOFTWARE SAMPLE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED 
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 IN NO EVENT SHALL STERLING COMMERCE, Inc. BE LIABLE UNDER ANY THEORY OF 
 LIABILITY (INCLUDING, BUT NOT LIMITED TO, BREACH OF CONTRACT, BREACH 
 OF WARRANTY, TORT, NEGLIGENCE, STRICT LIABILITY, OR ANY OTHER THEORY 
 OF LIABILITY) FOR (i) DIRECT DAMAGES OR INDIRECT, SPECIAL, INCIDENTAL, 
 OR CONSEQUENTIAL DAMAGES SUCH AS, BUT NOT LIMITED TO, EXEMPLARY OR 
 PUNITIVE DAMAGES, OR ANY OTHER SIMILAR DAMAGES, WHETHER OR NOT 
 FORESEEABLE AND WHETHER OR NOT STERLING OR ITS REPRESENTATIVES HAVE 
 BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES, OR (ii) ANY OTHER 
 CLAIM, DEMAND OR DAMAGES WHATSOEVER RESULTING FROM OR ARISING OUT OF
 OR IN CONNECTION THE DELIVERY OR USE OF THIS INFORMATION.
 */

package com.nwcg.icbs.yantra.ui.item;

import com.nwcg.icbs.yantra.util.common.NWCGApplicationLogger;
import com.yantra.ycm.ui.common.YCMUIConsts;
import com.yantra.ycp.ui.screens.util.YCPUIGenConsts;
import com.yantra.yfc.log.YFCLogCategory;

/**
 * 
 * @author Balaji
 * @version
 */
public class NWCGYCMItemNodeDefnDtl extends
		com.yantra.ycm.ui.screens.forms.YCMItemNodeDefnDtl {

	private static YFCLogCategory logger = NWCGApplicationLogger
			.instance(NWCGYCMItemNodeDefnDtl.class);

	private static final long serialVersionUID = -1335709633866982177L;

	/** Creates new form YCMModifyItem */
	public NWCGYCMItemNodeDefnDtl() {
	}

	public void init(Object obj) {
		initComponents();
		checkVars();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the FormEditor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		panelItemNodeDtl = new javax.swing.JPanel();
		panelModifyItemNodeKey = new javax.swing.JPanel();
		lkpItemID = new com.yantra.ycp.ui.screens.forms.YCPLookupField();
		lkpNode = new com.yantra.ycp.ui.screens.forms.YCPLookupField();
		lkpUOM = new com.yantra.ycp.ui.screens.forms.YCPLookupField();
		lblItemID = new javax.swing.JLabel();
		lblUOM = new javax.swing.JLabel();
		lblNode = new javax.swing.JLabel();
		lblDescription = new javax.swing.JLabel();
		txtDescription = new javax.swing.JTextField();
		pnlClassifications = new javax.swing.JPanel();
		pnlItemNodeClassificationDefaults = new javax.swing.JPanel();
		lblStorageType = new javax.swing.JLabel();
		lblPickingType = new javax.swing.JLabel();
		lblVelocityCode = new javax.swing.JLabel();
		chkOperationalConfigComplete = new javax.swing.JCheckBox();
		nodeFiller = new javax.swing.JPanel();
		pnlItemClassificationDefaults = new javax.swing.JPanel();
		chkItemOperationalConfigComplete = new javax.swing.JCheckBox();
		txtItemStorageType = new javax.swing.JTextField();
		txtItemPickingType = new javax.swing.JTextField();
		txtItemVelocityCode = new javax.swing.JTextField();
		itemDefaultFiller = new javax.swing.JPanel();
		pnlClassificationFiller = new javax.swing.JPanel();
		chkCarriedAtNode = new javax.swing.JCheckBox();
		jCheckBox2 = new javax.swing.JCheckBox();
		lblStdRefurbCost = new javax.swing.JLabel();
		txtStdRefurbCost = new javax.swing.JTextField();
		lblExternalRefurbCost = new javax.swing.JLabel();
		txtExternalRefurbCost = new javax.swing.JTextField();

		lblLocalItemCost = new javax.swing.JLabel();
		txtLocalItemCost = new javax.swing.JTextField();

		setLayout(new java.awt.GridBagLayout());

		panelItemNodeDtl.setLayout(new java.awt.GridBagLayout());

		panelItemNodeDtl.setBorder(new javax.swing.border.MatteBorder(null));
		panelModifyItemNodeKey.setLayout(new java.awt.GridBagLayout());

		panelModifyItemNodeKey.setBorder(javax.swing.BorderFactory
				.createTitledBorder(""));
		lblItemID.setText(getString("Item_ID"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
		panelModifyItemNodeKey.add(lblItemID, gridBagConstraints);
		lkpItemID
				.setCreateNewActionId(YCMUIConsts.YCM_ITEM_LIST_SCREEN_CREATE_ACTION);
		lkpItemID.setSearchActionId(YCMUIConsts.YCM_SIMPLE_SEARCH);
		lkpItemID.setName("xml:/ItemNodeDefn@ItemID");
		lkpItemID.putClientProperty("YFCXMLBinding.listName",
				"xml:/ItemNodeDefn/MasterData/Items@Item");
		lkpItemID.putClientProperty("YFCXMLBinding.codeAttribute", "ItemID");
		lkpItemID.putClientProperty("YFCXMLBinding.descriptionAttribute",
				"ItemID");
		lkpItemID.putClientProperty("YFCXMLBinding.associatedLabel", lblItemID);
		lkpItemID.putClientProperty("YFCXMLBinding.dataType", "ItemID");
		lkpItemID.putClientProperty("YFCXMLBinding.isMandatory", "true");
		lkpItemID.setDisableCreateNew(true);
		lkpItemID
				.setLookupSearchElement("<SearchElement>\n\t<DynamicAttributes OrganizationCode=\"@CallingOrganizationCode\"/>\n</SearchElement>");
		lkpItemID
				.setLookupCreateElement("<CreateElement>\n\t<DynamicAttributes OrganizationCode=\"@CallingOrganizationCode\"/>\n</CreateElement>");
		lkpItemID.setSearchFormId(YCMUIConsts.YCM_SIMPLE_SEARCH);
		lkpItemID.setCreateNewFormId(YCMUIConsts.YCM_CREATE_ITEM_SCREEN);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
		panelModifyItemNodeKey.add(lkpItemID, gridBagConstraints);

		lblUOM.setText(getString("UOM"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
		panelModifyItemNodeKey.add(lblUOM, gridBagConstraints);

		lkpUOM.setCreateNewActionId(YCMUIConsts.YCM_PROD_ITEM_LIST_SCREEN_CREATE_ACTION);
		lkpUOM.setSearchActionId(YCPUIGenConsts.YCP_QUANTITY_UOM_TYPE_LIST_SCREEN);
		lkpUOM.setUseGenericSearch(true);
		lkpUOM.setName("xml:/ItemNodeDefn@UnitOfMeasure");
		lkpUOM.putClientProperty("YFCXMLBinding.listName",
				"xml:/ItemNodeDefn/MasterData/UOMs@ItemUOMMaster");
		lkpUOM.putClientProperty("YFCXMLBinding.codeAttribute", "UnitOfMeasure");
		lkpUOM.putClientProperty("YFCXMLBinding.descriptionAttribute",
				"Description");
		lkpUOM.putClientProperty("YFCXMLBinding.associatedLabel", lblUOM);
		lkpUOM.putClientProperty("YFCXMLBinding.dataType", "UOM");
		lkpUOM.setDisableCreateNew(true);
		lkpUOM.setLookupSearchElement("<SearchElement>\n\t<DynamicAttributes ItemGroupCode=\"@ItemGroupCode\" CallingOrganizationCode=\"@CallingOrganizationCode\"/>\n</SearchElement>");
		lkpUOM.setLookupCreateElement("<CreateElement>\n\t<DynamicAttributes ItemGroupCode=\"@ItemGroupCode\" CallingOrganizationCode=\"@CallingOrganizationCode\"/>\n</CreateElement>");
		lkpUOM.setSearchFormId(YCPUIGenConsts.YCP_QUANTITY_UOM_TYPE_LIST_SCREEN);
		lkpUOM.setCreateNewFormId(YCMUIConsts.YCM_ITEM_UOM_MASTER_DETAILS_SCREEN);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
		panelModifyItemNodeKey.add(lkpUOM, gridBagConstraints);

		lblNode.setText(getString("Node"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
		panelModifyItemNodeKey.add(lblNode, gridBagConstraints);

		lkpNode.setSearchActionId(YCPUIGenConsts.YCP_SHIP_NODE_LIST_SCREEN);
		lkpNode.setUseGenericSearch(true);
		lkpNode.setName("xml:/ItemNodeDefn@Node");
		lkpNode.putClientProperty("YFCXMLBinding.isMandatory", "true");
		lkpNode.putClientProperty("YFCXMLBinding.dataType", "Key");
		lkpNode.putClientProperty("YFCXMLBinding.codeAttribute", "ShipnodeKey");
		lkpNode.putClientProperty("YFCXMLBinding.descriptionAttribute",
				"ShipnodeKey");
		lkpNode.putClientProperty("YFCXMLBinding.listName",
				"xml:/ItemNodeDefn/MasterData/Nodes@ShipNode");
		lkpNode.putClientProperty("YFCXMLBinding..associatedLabel", "lblNode");
		lkpNode.setDisableCreateNew(true);
		lkpNode.setSearchFormId(YCPUIGenConsts.YCP_SHIP_NODE_LIST_SCREEN);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
		panelModifyItemNodeKey.add(lkpNode, gridBagConstraints);

		lblDescription.setText(getString("Description"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
		panelModifyItemNodeKey.add(lblDescription, gridBagConstraints);

		txtDescription
				.setName("xml:/ItemNodeDefn/Item/PrimaryInformation@ShortDescription");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
		panelModifyItemNodeKey.add(txtDescription, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(17, 17, 0, 17);
		panelItemNodeDtl.add(panelModifyItemNodeKey, gridBagConstraints);

		pnlClassifications.setLayout(new java.awt.GridBagLayout());

		pnlClassifications.setName("Classifications");
		pnlItemNodeClassificationDefaults
				.setLayout(new java.awt.GridBagLayout());

		pnlItemNodeClassificationDefaults
				.setBorder(javax.swing.BorderFactory
						.createTitledBorder(getString("Operational_Classification_Node_Override_Values")));
		lblStorageType.setText(getString("Storage_Type"));
		lblStorageType.putClientProperty("YFCClassificationAttribute",
				"StorageType");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
		pnlItemNodeClassificationDefaults.add(lblStorageType,
				gridBagConstraints);

		lblPickingType.setText(getString("Picking_Type"));
		lblPickingType.putClientProperty("YFCClassificationAttribute",
				"PickingType");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
		pnlItemNodeClassificationDefaults.add(lblPickingType,
				gridBagConstraints);

		lblVelocityCode.setText(getString("Velocity_Code"));
		lblVelocityCode.putClientProperty("YFCClassificationAttribute",
				"VelocityCode");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
		pnlItemNodeClassificationDefaults.add(lblVelocityCode,
				gridBagConstraints);

		chkOperationalConfigComplete
				.setText(getString("Operational_Configuration_Complete"));
		chkOperationalConfigComplete
				.setName("xml:/ItemNodeDefn@OperationalConfigurationComplete");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
		pnlItemNodeClassificationDefaults.add(chkOperationalConfigComplete,
				gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		pnlItemNodeClassificationDefaults.add(nodeFiller, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
		pnlClassifications.add(pnlItemNodeClassificationDefaults,
				gridBagConstraints);

		pnlItemClassificationDefaults.setLayout(new java.awt.GridBagLayout());

		pnlItemClassificationDefaults
				.setBorder(javax.swing.BorderFactory
						.createTitledBorder(getString("Operational_Classification_Item_Defaults")));
		chkItemOperationalConfigComplete
				.setText(getString("Operational_Configuration_Complete"));
		chkItemOperationalConfigComplete
				.setName("xml:/ItemNodeDefn/Item/ClassificationCodes@OperationalConfigurationComplete");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
		pnlItemClassificationDefaults.add(chkItemOperationalConfigComplete,
				gridBagConstraints);

		txtItemStorageType
				.setName("xml:/ItemNodeDefn/Item/ClassificationCodes@StorageType");
		txtItemStorageType.putClientProperty("YFCXMLBinding.dataType",
				"Text-40");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
		pnlItemClassificationDefaults.add(txtItemStorageType,
				gridBagConstraints);

		txtItemPickingType
				.setName("xml:/ItemNodeDefn/Item/ClassificationCodes@PickingType");
		txtItemPickingType.putClientProperty("YFCXMLBinding.dataType",
				"Text-40");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
		pnlItemClassificationDefaults.add(txtItemPickingType,
				gridBagConstraints);

		txtItemVelocityCode
				.setName("xml:/ItemNodeDefn/Item/ClassificationCodes@VelocityCode");
		txtItemVelocityCode.putClientProperty("YFCXMLBinding.dataType",
				"Text-40");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
		pnlItemClassificationDefaults.add(txtItemVelocityCode,
				gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		pnlItemClassificationDefaults
				.add(itemDefaultFiller, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
		pnlClassifications.add(pnlItemClassificationDefaults,
				gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(0, 17, 17, 17);
		panelItemNodeDtl.add(pnlClassifications, gridBagConstraints);

		pnlClassificationFiller.setLayout(new java.awt.GridBagLayout());
		pnlClassificationFiller.setBorder(javax.swing.BorderFactory
				.createTitledBorder(getString("Additional_Attributes")));

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);

		chkCarriedAtNode.setText(getString("Carried_At_Node"));
		chkCarriedAtNode.setName("xml:/ItemNodeDefn/Extn@ExtnCarriedAtNode");
		pnlClassificationFiller.add(chkCarriedAtNode, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
		jCheckBox2.setText(getString("Local_Critical_Item"));
		jCheckBox2.setName("xml:/ItemNodeDefn/Extn@ExtnLocalCriticalItem");
		pnlClassificationFiller.add(jCheckBox2, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
		lblStdRefurbCost.setText(getString("Refurb_Cost"));
		pnlClassificationFiller.add(lblStdRefurbCost, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
		txtStdRefurbCost.setColumns(10);
		txtStdRefurbCost.setName("xml:/ItemNodeDefn/Extn@ExtnStdRefurbCost");
		pnlClassificationFiller.add(txtStdRefurbCost, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
		lblExternalRefurbCost.setText(getString("External_Refurb_Cost"));
		pnlClassificationFiller.add(lblExternalRefurbCost, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
		txtStdRefurbCost.setColumns(10);
		txtExternalRefurbCost
				.setName("xml:/ItemNodeDefn/Extn@ExtnExternalRefurbCost");
		pnlClassificationFiller.add(txtExternalRefurbCost, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
		lblLocalItemCost.setText(getString("Local_Item_Cost"));
		pnlClassificationFiller.add(lblLocalItemCost, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
		txtLocalItemCost.setColumns(10);
		txtLocalItemCost.setName("xml:/ItemNodeDefn/Extn@ExtnLocalItemCost");
		pnlClassificationFiller.add(txtLocalItemCost, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		panelItemNodeDtl.add(pnlClassificationFiller, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		add(panelItemNodeDtl, gridBagConstraints);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	public javax.swing.JCheckBox chkCarriedAtNode;
	public javax.swing.JCheckBox chkItemOperationalConfigComplete;
	public javax.swing.JCheckBox chkOperationalConfigComplete;
	public javax.swing.JPanel itemDefaultFiller;
	public javax.swing.JCheckBox jCheckBox2;
	public javax.swing.JLabel lblExternalRefurbCost;
	public javax.swing.JLabel lblLocalItemCost;
	public javax.swing.JTextField txtExternalRefurbCost;
	public javax.swing.JTextField txtLocalItemCost;
	public javax.swing.JLabel lblDescription;
	public javax.swing.JLabel lblItemID;
	public javax.swing.JLabel lblNode;
	public javax.swing.JLabel lblPickingType;
	public javax.swing.JLabel lblStdRefurbCost;
	public javax.swing.JLabel lblStorageType;
	public javax.swing.JLabel lblUOM;
	public javax.swing.JLabel lblVelocityCode;
	public javax.swing.JPanel nodeFiller;
	public javax.swing.JPanel panelItemNodeDtl;
	public javax.swing.JPanel panelModifyItemNodeKey;
	public javax.swing.JPanel pnlClassificationFiller;
	public javax.swing.JPanel pnlClassifications;
	public javax.swing.JPanel pnlItemClassificationDefaults;
	public javax.swing.JPanel pnlItemNodeClassificationDefaults;
	public javax.swing.JTextField txtDescription;
	public javax.swing.JTextField txtItemPickingType;
	public javax.swing.JTextField txtItemStorageType;
	public javax.swing.JTextField txtItemVelocityCode;
	public javax.swing.JTextField txtStdRefurbCost;
	public com.yantra.ycp.ui.screens.forms.YCPLookupField lkpItemID;
	public com.yantra.ycp.ui.screens.forms.YCPLookupField lkpNode;
	public com.yantra.ycp.ui.screens.forms.YCPLookupField lkpUOM;
	// End of variables declaration//GEN-END:variables

}
