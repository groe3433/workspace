EXECUTE ClearRoguePendInPendOut;

CREATE OR REPLACE PROCEDURE ClearRoguePendInPendOut 

IS 
  CURSOR myPendInCursor IS
          SELECT INVENTORY.NODE_KEY NODE_KEY,INVENTORY.LOCATION_ID LOCATION_ID,INVENTORY.INVENTORY_ITEM_KEY INVENTORY_ITEM_KEY,INVENTORY.ITEM_ID ITEM_ID,INVENTORY.INVENTORY_STATUS INVENTORY_STATUS,
                 SUM(INVENTORY.LOOSE_PI_QTY) PEND_IN_AGAINST_LOCATION,SUM(INVENTORY.LPN_PI_QTY) PEND_IN_AGAINST_LPN,SUM(INVENTORY.LOOSE_PI_QTY) + SUM(INVENTORY.LPN_PI_QTY) TOTAL_INVENTORY_PEND_IN,
                 SUM(INVENTORY.TASK_QTY) TASK_QTY_AGAINST_PEND_IN
          FROM ( SELECT LI.NODE_KEY,LI.LOCATION_ID,LI.INVENTORY_ITEM_KEY,LI.INVENTORY_STATUS,SUM(LI.PEND_IN_QTY) AS LOOSE_PI_QTY,0 AS LPN_PI_QTY,0 AS TASK_QTY,ITEM.ITEM_ID
                 FROM YFS_SHIP_NODE SN, YFS_LOCATION_INVENTORY LI, YFS_INVENTORY_ITEM IT,yfs_ITEM ITEM
                 WHERE SN.DCM_INTEGRATION_REAL_TIME = 'Y' AND LI.NODE_KEY = SN.SHIPNODE_KEY AND IT.INVENTORY_ITEM_KEY = LI.INVENTORY_ITEM_KEY AND it.item_id = ITEM.ITEM_ID
                 GROUP BY LI.NODE_KEY,LI.LOCATION_ID,LI.INVENTORY_ITEM_KEY,LI.INVENTORY_STATUS,ITEM.ITEM_ID        
                 UNION
                 SELECT  LM.NODE_KEY,LM.TARGET_LOCATION_ID,LD.INVENTORY_ITEM_KEY,LD.INVENTORY_STATUS,0 AS LOOSE_PI_QTY,SUM(LM.ALLOC_QTY) AS LPN_PI_QTY,0 AS TASK_QTY,ITEM.ITEM_ID
                 FROM YFS_SHIP_NODE SN, YFS_LPN_PEND_MOVE LM, YFS_LPN_DTL LD, YFS_INVENTORY_ITEM IT,yfs_ITEM ITEM
                 WHERE SN.DCM_INTEGRATION_REAL_TIME = 'Y' AND LM.NODE_KEY = SN.SHIPNODE_KEY AND LM.LPN_NO = LD.LPN_NO AND LM.LPN_DTL_KEY = LD.LPN_DTL_KEY AND LD.INVENTORY_ITEM_KEY = IT.INVENTORY_ITEM_KEY AND LM.TARGET_LOCATION_ID > ' ' AND it.item_id =ITEM. ITEM_ID
                 GROUP BY LM.NODE_KEY, LM.TARGET_LOCATION_ID, LD.INVENTORY_ITEM_KEY, LD.INVENTORY_STATUS,ITEM.ITEM_ID
                 UNION
                 SELECT  TA.ORGANIZATION_CODE,TA.TARGET_LOCATION_ID,IT.INVENTORY_ITEM_KEY,TA.INVENTORY_STATUS,0 AS LOOSE_PI_QTY,0 AS LPN_PI_QTY,SUM(TA.QUANTITY) AS TASK_QTY,ITEM.ITEM_ID
                 FROM YFS_SHIP_NODE SN, YFS_TASK TA, YFS_INVENTORY_ITEM IT ,yfs_ITEM ITEM
                 WHERE SN.DCM_INTEGRATION_REAL_TIME = 'Y' AND TA.ORGANIZATION_CODE = SN.SHIPNODE_KEY AND TA.ENTERPRISE_KEY = IT.ORGANIZATION_CODE AND TA.ITEM_ID = IT.ITEM_ID AND TA.UNIT_OF_MEASURE = IT.UOM AND TA.PRODUCT_CLASS = IT.PRODUCT_CLASS AND TA.TARGET_LOCATION_ID > ' ' AND TA.TASK_STATUS < 2000 AND it.item_id =ITEM.ITEM_ID
                 GROUP BY TA.ORGANIZATION_CODE,TA.TARGET_LOCATION_ID,IT.INVENTORY_ITEM_KEY,TA.INVENTORY_STATUS,ITEM.ITEM_ID ) INVENTORY
          GROUP BY INVENTORY.NODE_KEY, INVENTORY.LOCATION_ID, INVENTORY.INVENTORY_ITEM_KEY, INVENTORY.INVENTORY_STATUS,INVENTORY.ITEM_ID
          HAVING ( ( SUM(INVENTORY.LOOSE_PI_QTY) + SUM(INVENTORY.LPN_PI_QTY) ) <> SUM(INVENTORY.TASK_QTY) )
          ORDER BY INVENTORY.NODE_KEY;
          
  CURSOR myPendOutCursor IS
          SELECT INVENTORY.NODE_KEY NODE_KEY,INVENTORY.LOCATION_ID LOCATION_ID,INVENTORY.INVENTORY_ITEM_KEY INVENTORY_ITEM_KEY,INVENTORY.INVENTORY_STATUS INVENTORY_STATUS,
                SUM(INVENTORY.LOOSE_PO_QTY) PEND_OUT_AGAINST_LOCATION,SUM(INVENTORY.LPN_PO_QTY) PEND_OUT_AGAINST_LPN,SUM(INVENTORY.LOOSE_PO_QTY) + SUM(INVENTORY.LPN_PO_QTY) TOTAL_INVENTORY_PEND_OUT,
                SUM(INVENTORY.TASK_QTY) TASK_QTY_AGAINST_PEND_OUT
          FROM ( SELECT LI.NODE_KEY,LI.LOCATION_ID,LI.INVENTORY_ITEM_KEY,LI.INVENTORY_STATUS,SUM(LI.HARD_ALLOC_QTY) AS LOOSE_PO_QTY,0 AS LPN_PO_QTY,0 AS TASK_QTY
                 FROM YFS_SHIP_NODE SN, YFS_LOCATION_INVENTORY LI, YFS_INVENTORY_ITEM IT
                 WHERE SN.DCM_INTEGRATION_REAL_TIME = 'Y' AND LI.NODE_KEY = SN.SHIPNODE_KEY AND LI.INVENTORY_ITEM_KEY = IT.INVENTORY_ITEM_KEY
                 GROUP BY LI.NODE_KEY, LI.LOCATION_ID, LI.INVENTORY_ITEM_KEY, LI.INVENTORY_STATUS
                 UNION
                 SELECT LC.NODE_KEY,LC.LOCATION_ID,LD.INVENTORY_ITEM_KEY,LD.INVENTORY_STATUS,0 AS LOOSE_PO_QTY,SUM(LM.ALLOC_QTY) AS LPN_PO_QTY,0 AS TASK_QTY
                 FROM YFS_SHIP_NODE SN, YFS_LPN_PEND_MOVE LM, YFS_LPN_DTL LD, YFS_LPN_LOCATION LC, YFS_INVENTORY_ITEM IT 
                 WHERE SN.DCM_INTEGRATION_REAL_TIME = 'Y' AND LC.NODE_KEY = SN.SHIPNODE_KEY AND LD.LPN_NO = LC.OUTER_MOST_LPN_NO AND LM.LPN_NO = LD.LPN_NO AND LM.LPN_DTL_KEY = LD.LPN_DTL_KEY AND LD.INVENTORY_ITEM_KEY = IT.INVENTORY_ITEM_KEY
                 GROUP BY LC.NODE_KEY, LC.LOCATION_ID, LD.INVENTORY_ITEM_KEY, LD.INVENTORY_STATUS
                 UNION
                 SELECT TA.ORGANIZATION_CODE,TA.SOURCE_LOCATION_ID,IT.INVENTORY_ITEM_KEY,TA.INVENTORY_STATUS,0 AS LOOSE_PO_QTY,0 AS LPN_PO_QTY,SUM(TA.QUANTITY) AS TASK_QTY
                 FROM YFS_SHIP_NODE SN, YFS_TASK TA, YFS_INVENTORY_ITEM IT 
                 WHERE SN.DCM_INTEGRATION_REAL_TIME = 'Y' AND TA.ORGANIZATION_CODE = SN.SHIPNODE_KEY AND TA.ENTERPRISE_KEY = IT.ORGANIZATION_CODE AND TA.ITEM_ID = IT.ITEM_ID AND TA.UNIT_OF_MEASURE = IT.UOM AND TA.PRODUCT_CLASS = IT.PRODUCT_CLASS AND TA.SOURCE_LOCATION_ID > ' ' AND TA.TASK_STATUS < 2000
                 GROUP BY TA.ORGANIZATION_CODE, TA.SOURCE_LOCATION_ID, IT.INVENTORY_ITEM_KEY, TA.INVENTORY_STATUS ) INVENTORY
          GROUP BY INVENTORY.NODE_KEY, INVENTORY.LOCATION_ID, INVENTORY.INVENTORY_ITEM_KEY, INVENTORY.INVENTORY_STATUS
          HAVING ( ( SUM(INVENTORY.LOOSE_PO_QTY) + SUM(INVENTORY.LPN_PO_QTY) ) <> SUM(INVENTORY.TASK_QTY) );        
          
  recIn myPendInCursor%rowtype;
  recOut myPendOutCursor%rowtype;
BEGIN
      dbms_output.put_line('Clearing Pend INs...');
      OPEN myPendInCursor;
      LOOP
        FETCH myPendInCursor INTO recIn;
        EXIT WHEN myPendInCursor %notfound;
        
        IF recIn.TASK_QTY_AGAINST_PEND_IN = 0 THEN
          dbms_output.put_line('Tasks Pending: ' || recIn.TASK_QTY_AGAINST_PEND_IN);
          dbms_output.put_line('Total Inv Pend In: ' || recIn.TOTAL_INVENTORY_PEND_IN);
          IF recIn.PEND_IN_AGAINST_LOCATION > 0 THEN
            dbms_output.put_line('Pend Ins Against Location: ' || recIn.PEND_IN_AGAINST_LOCATION);
            dbms_output.put_line(recIn.NODE_KEY || ' ' || recIn.LOCATION_ID || ' ' || recIn.INVENTORY_ITEM_KEY || ' ' || recIn.ITEM_ID || ' ' || recIn.INVENTORY_STATUS);
            update yfs_location_inventory set pend_in_qty = 0 where node_key = recIn.NODE_KEY and location_id = recIn.LOCATION_ID and inventory_item_key = recIn.INVENTORY_ITEM_KEY and inventory_status = recIn.INVENTORY_STATUS and pend_in_qty = recIn.PEND_IN_AGAINST_LOCATION;
          ELSIF recIn.PEND_IN_AGAINST_LPN > 0 THEN
            dbms_output.put_line('Pend Ins Against LPN: ' || recIn.PEND_IN_AGAINST_LPN);
            dbms_output.put_line('Do nothing at the moment...');
            --update yfs_location_inventory set pend_in_qty = 0 where node_key = recIn.NODE_KEY and location_id = recIn.LOCATION_ID and inventory_item_key = recIn.INVENTORY_ITEM_KEY and inventory_status = recIn.INVENTORY_STATUS and pend_in_qty = recIn.PEND_IN_AGAINST_LOCATION;
          END IF;
        END IF;
        
      END LOOP;

      COMMIT;
      CLOSE myPendInCursor;
      dbms_output.put_line('Commiting Pend INs...');
      
      dbms_output.put_line('Clearing Pend OUTs...');
      OPEN myPendOutCursor;
      LOOP
        FETCH myPendOutCursor INTO recOut;
        EXIT WHEN myPendOutCursor %notfound;

        IF recOut.TASK_QTY_AGAINST_PEND_OUT = 0 THEN
          dbms_output.put_line('Tasks Pending: ' || recOut.TASK_QTY_AGAINST_PEND_OUT);
          dbms_output.put_line('Total Inv Pend Out: ' || recOut.TOTAL_INVENTORY_PEND_OUT);
          IF recOut.PEND_OUT_AGAINST_LOCATION > 0 THEN
            dbms_output.put_line('Pend Outs Against Location: ' || recOut.PEND_OUT_AGAINST_LOCATION);
            dbms_output.put_line(recOut.NODE_KEY || ' ' || recOut.LOCATION_ID || ' ' || recOut.INVENTORY_ITEM_KEY || ' ' || recOut.INVENTORY_STATUS);
            update yfS_location_inventory set HARD_ALLOC_QTY = 0 where node_key = recOut.NODE_KEY and location_id = recOut.LOCATION_ID and inventory_item_key = recOut.INVENTORY_ITEM_KEY and inventory_status = recOut.INVENTORY_STATUS and HARD_ALLOC_QTY = recOut.PEND_OUT_AGAINST_LOCATION;
          ELSIF recOut.PEND_OUT_AGAINST_LPN > 0 THEN
            dbms_output.put_line('Pend Outs Against LPN: ' || recOut.PEND_OUT_AGAINST_LPN);
            dbms_output.put_line('Do nothing at the moment...');
            --update yfS_location_inventory set HARD_ALLOC_QTY = 0 where node_key = recOut.NODE_KEY and location_id = recOut.LOCATION_ID and inventory_item_key = recOut.INVENTORY_ITEM_KEY and inventory_status = recOut.INVENTORY_STATUS and pend_in_qty = recOut.PEND_OUT_AGAINST_LOCATION;
          END IF;
        END IF;
        
      END LOOP;

      COMMIT;
      CLOSE myPendOutCursor;
      dbms_output.put_line('Commiting Pend OUTs...');
END;